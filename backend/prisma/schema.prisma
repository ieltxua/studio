// Studio AI Platform Database Schema
// Multi-tenant architecture with comprehensive audit logging

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// CORE ORGANIZATION & USER MODELS
// ================================

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  
  // Subscription and limits
  planType    PlanType @default(FREE)
  maxProjects Int      @default(3)
  maxAgents   Int      @default(5)
  maxUsers    Int      @default(10)
  
  // Billing
  stripeCustomerId String?
  subscriptionId   String?
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  
  // Relations
  users    OrganizationUser[]
  projects Project[]
  agents   Agent[]
  
  @@map("organizations")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String? @unique
  
  // Profile
  firstName String?
  lastName  String?
  avatar    String?
  timezone  String? @default("UTC")
  
  // Authentication
  passwordHash String?
  emailVerified DateTime?
  
  // OAuth providers
  githubId   String? @unique
  googleId   String? @unique
  slackId    String? @unique
  
  // Preferences
  preferences Json @default("{}")
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime?
  
  // Relations
  organizations OrganizationUser[]
  projects      ProjectUser[]
  tasks         Task[]
  auditLogs     AuditLog[]
  
  @@map("users")
}

model OrganizationUser {
  id   String @id @default(cuid())
  role Role   @default(MEMBER)
  
  // Audit fields
  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, userId])
  @@map("organization_users")
}

// ================================
// PROJECT MANAGEMENT MODELS
// ================================

model Project {
  id          String  @id @default(cuid())
  name        String
  description String?
  
  // Configuration
  status      ProjectStatus @default(ACTIVE)
  visibility  Visibility    @default(PRIVATE)
  settings    Json          @default("{}")
  
  // GitHub integration
  githubRepoId   String?
  githubRepoName String?
  githubOwner    String?
  
  // Slack integration
  slackChannelId   String?
  slackChannelName String?
  
  // Budget and limits
  budgetLimit     Decimal? @db.Decimal(10, 2)
  tokenLimit      Int?
  currentSpent    Decimal  @default(0.00) @db.Decimal(10, 2)
  currentTokens   Int      @default(0)
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  archivedAt DateTime?
  
  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  users     ProjectUser[]
  agents    Agent[]
  tasks     Task[]
  milestones Milestone[]
  auditLogs AuditLog[]
  
  @@map("projects")
}

model ProjectUser {
  id   String      @id @default(cuid())
  role ProjectRole @default(DEVELOPER)
  
  // Permissions
  permissions Json @default("[]")
  
  // Audit fields
  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, userId])
  @@map("project_users")
}

// ================================
// AI AGENT MODELS
// ================================

model Agent {
  id   String @id @default(cuid())
  name String
  
  // Configuration
  type         AgentType   @default(GENERAL)
  status       AgentStatus @default(IDLE)
  capabilities Json        @default("[]")
  configuration Json       @default("{}")
  
  // AI Model settings
  model        String  @default("claude-3-sonnet")
  maxTokens    Int     @default(4000)
  temperature  Float   @default(0.7)
  
  // Performance tracking
  tasksCompleted Int     @default(0)
  successRate    Float   @default(0.0)
  avgDuration    Int     @default(0) // minutes
  totalCost      Decimal @default(0.00) @db.Decimal(10, 2)
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastActive DateTime?
  
  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  tasks     Task[]
  auditLogs AuditLog[]
  
  @@map("agents")
}

// ================================
// TASK & WORKFLOW MODELS
// ================================

model Task {
  id          String @id @default(cuid())
  title       String
  description String?
  
  // Task organization
  type        TaskType   @default(FEATURE)
  status      TaskStatus @default(PENDING)
  priority    Priority   @default(MEDIUM)
  
  // Effort estimation
  estimatedDuration Int? // minutes
  actualDuration    Int? // minutes
  
  // GitHub integration
  githubIssueId     Int?
  githubIssueNumber Int?
  githubPrId        Int?
  githubPrNumber    Int?
  
  // Dependencies
  dependencies Json @default("[]") // Array of task IDs
  blockers     Json @default("[]") // Array of blocker descriptions
  
  // Acceptance criteria and progress
  acceptanceCriteria Json @default("[]")
  progress          Float @default(0.0)
  
  // Cost tracking
  tokenUsage Int     @default(0)
  cost       Decimal @default(0.00) @db.Decimal(10, 2)
  
  // Timing
  startedAt   DateTime?
  completedAt DateTime?
  dueDate     DateTime?
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  assigneeId String?
  assignee   User?   @relation(fields: [assigneeId], references: [id], onDelete: SetNull)
  
  agentId String?
  agent   Agent?  @relation(fields: [agentId], references: [id], onDelete: SetNull)
  
  milestoneId String?
  milestone   Milestone? @relation(fields: [milestoneId], references: [id], onDelete: SetNull)
  
  auditLogs AuditLog[]
  
  @@map("tasks")
}

model Milestone {
  id          String @id @default(cuid())
  title       String
  description String?
  
  // Status and timing
  status     MilestoneStatus @default(PLANNED)
  targetDate DateTime?
  completedAt DateTime?
  
  // Progress tracking
  progress Float @default(0.0)
  
  // Audit fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  tasks Task[]
  
  @@map("milestones")
}

// ================================
// AUDIT & MONITORING MODELS
// ================================

model AuditLog {
  id        String @id @default(cuid())
  action    String
  resource  String
  resourceId String?
  
  // Context
  details   Json?
  metadata  Json?
  userAgent String?
  ipAddress String?
  
  // Audit fields
  createdAt DateTime @default(now())
  
  // Relations
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  agentId String?
  agent   Agent?  @relation(fields: [agentId], references: [id], onDelete: SetNull)
  
  taskId String?
  task   Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@map("audit_logs")
}

// ================================
// ENUMS
// ================================

enum PlanType {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum ProjectRole {
  OWNER
  MAINTAINER
  DEVELOPER
  VIEWER
}

enum ProjectStatus {
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum Visibility {
  PRIVATE
  INTERNAL
  PUBLIC
}

enum AgentType {
  GENERAL
  BACKEND
  FRONTEND
  DEVOPS
  TESTING
  REVIEW
  DOCUMENTATION
}

enum AgentStatus {
  IDLE
  BUSY
  ERROR
  OFFLINE
  MAINTENANCE
}

enum TaskType {
  FEATURE
  BUG
  ENHANCEMENT
  REFACTOR
  DOCUMENTATION
  TESTING
  DEPLOYMENT
  RESEARCH
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  REVIEW
  TESTING
  COMPLETED
  CANCELLED
  BLOCKED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MilestoneStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  DELAYED
}